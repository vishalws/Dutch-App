package com.dutch.utils;


import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.SqlOutParameter;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.simple.SimpleJdbcCall;
import org.springframework.jdbc.object.SqlFunction;

import javax.sql.DataSource;
import java.sql.Types;
import java.util.*;


public class SPUtils {
    private static Logger log = LogManager.getLogger(SPUtils.class);

    // SP Names  ---- CONSTANTS
    public static final String GET_SENTENCES = "Sp_GetSentences";
    public static final String GET_AUDIO_FILE = "Sp_GetTrialSentenceFile";
    public static final String SAVE_RECORDING = "Sp_SaveRecordings";
    public static final String GET_RECORDING_STATUS = "Sp_GetUserSentences";
    public static final String GET_TOTAL_ROUNDS_COUNT = "Sp_UserTrialRecordings";

    //Login
    public static final String CS_User_Login = "CS_User_Login";

    //GET

    public static final String GET_ZP_CANDIDATES_NAMES = "CS_SPGetCandidateNameFormZP_Candidate_Details";
    public static final String GET_SWOT_Analysis_NAMES = "CS_SPGetCandidateNameFormCS_ZP_SWOT_Analysis";
    public static final String GET_TP_CANDIDATES_NAMES = "CS_GetCandidateList";
    public static final String GET_Disgruntled_Leaders = "CS_SPGetCandidateNameFormCS_Disgruntled_Leaders";


    public static final String GET_CANDIDATES_NAMES = "CS_GetCandidateName";
    public static final String CS_GET_TPNAMES = "CS_SPGetTPNames";


    public static final String CS_SP_ZPCasteAnalysis = "CS_SP_ZPCasteAnalysis";
    public static final String CS_SP_ZPCasteAnalysis_Summary = "CS_SP_ZPCasteAnalysis_Summary";
    public static final String TP_CasteAnalysis = "CS_SP_TPCasteAnalysis";
    public static final String ZP_CANDIDATE_DETAILS_GET = "CS_SPGetZpCandidate";
    public static final String TP_CANDIDATE_DETAILS_GET = "CS_SPGetTPCandidateDetails";
    public static final String DISGRUNTLED_LEADERS_GET = "CS_Get_Disgruntled_Leaders";
    public static final String MAJOR_POLL_ISSUES_GET = "CS_GetMajorPollsIssue";
    public static final String CS_TP_MembersCasteGet = "CS_TP_MembersCasteGet";
    public static final String SWOT_ANALYSIS_GET = "CS_SPGetZPSWOTAnalysis";
    public static final String CS_GetLocalDevelopementIssue = "CS_GetLocalDevelopementIssue";
    public static final String CS_SPGetManifesto = "CS_SPGetManifesto";
    public static final String CS_MANIFESTO_FILTERS = "CS_SPGetImpactScope_Type_Manifesto";
    public static final String CS_PartyGet = "CS_PartyGet";

    //Update
    public static final String ZP_CANDIDATE_DETAILS_UPDATE = "CS_ZP_CandidateUpdate";
    public static final String TP_CANDIDATE_DETAILS_UPDATE = "CS_SPEditTPCandidateDetails";
    public static final String DISGRUNTLED_LEADERS_UPDATE = "CS_UpdateDisgruntled_Leaders";
    public static final String MAJOR_POLL_ISSUES_UPDATE = "CS_UpdateMajorPollsIssue";
    public static final String CS_ZP_CasteAnalysis_Insert = "CS_ZP_CasteAnalysis_Insert";
    public static final String SWOT_ANALYSIS_UPDATE = "CS_SPEditGetZPSWOTAnalysis";
    public static final String CS_TP_CasteAnalysis_Insert = "CS_TP_CasteAnalysis_Insert";
    public static final String CS_UpdateLocalDevelopmetIssue = "CS_UpdateLocalDevelopmetIssue";
    public static final String CS_TP_MembersCaste_Insert = "CS_TP_MembersCaste_Insert";
    public static final String CS_MANIFESTO_INSERT = "CS_SPEditManifesto";
    public static final String CS_ContestedCandidates_Insert = "CS_ContestedCandidates_Insert";
    public static final String Cs_PreviousResults_Insert = "Cs_PreviousResults_Insert";
    public static final String CS_UpdateFocusPoints = "CS_UpdateFocusPoints";
    public static final String SaveFocusPoints = "SaveFocusPoints";

    //Delete
    public static final String ZP_CANDIDATE_DETAILS_DELETE = "CS_ZP_DeleteCandidate";
    public static final String TP_CANDIDATE_DETAILS_DELETE = "CS_SPDeleteTPCandidate_Details";
    public static final String DISGRUNTLED_LEADERS_DELETE = "CS_DeleteDisgruntledLeaders";
    public static final String MAJOR_POLL_ISSUES_DELETE = "CS_DeleteMajorPollsIssue";
    public static final String CS_ZP_Caste_Analysis_Delete = "CS_ZP_Caste_Analysis_Delete";
    public static final String SWOT_ANALYSIS_DELETE = "CS_SPDeleteZPSWOTAnalysis";
    public static final String CS_TP_Caste_Analysis_Delete = "CS_TP_Caste_Analysis_Delete";
    public static final String CS_DeleteLocalDevelopmetIssue = "CS_DeleteLocalDevelopmetIssue";
    public static final String CS_TP_MembersCaste_Delete = "CS_TP_MembersCaste_Delete";
    public static final String CS_MANIFESTO_DELETE = "CS_SPDeleteManifesto";
    public static final String CS_ContestedCandidates_Delete = "CS_ContestedCandidates_Delete";
    public static final String CS_PreviousResults_Delete = "CS_PreviousResults_Delete";
    public static final String CS_DeleteFocusPOints = "CS_DeleteMicrostrategy_FocusVillages";
    public static final String CS_ZP_SPDeleteSpeechPoint_Villages = "CS_ZP_SPDeleteSpeechPoint_Villages";


    //History
    public static final String ZP_CANDIDATE_DETAILS_HISTORY = "CS_HistoryZpCandidate";
    public static final String ZP_CASTE_DETAILS_HISTORY = "CS_SPZP_Caste_Analysis_History";
    public static final String TP_CANDIDATE_DETAILS_HISTORY = "CS_TP_HistoryCandidateDetails";
    public static final String TP_CASTE_DETAILS_HISTORY = "CS_SPTP_Caste_Analysis_History";
    public static final String TP_MEMBER_CASTE_HISTORY = "CS_SPTP_MembersCaste_History";
    public static final String DISGRUNTLED_LEADERS_HISTORY = "CS_HistoryDisgruntledLeaders";
    public static final String LOCAL_DEVELOPMENT_ISSUES_HISTORY = "CS_HistoryLocalDevelopmetIssue";
    public static final String SWOT_ANALYSIS_HISTORY = "CS_SPHistoryZPSWOTAnalysis";
    public static final String MAJOR_POLL_ISSUES_HISTORY = "CS_HistoryMajorPollsIssue";
    public static final String CS_MANIFESTO_HISTORY = "CS_SPGetManifesto_History";
    public static final String CS_GetMANIFESTO_ZILLANAMES = "CS_GetZPULPNames";


    public static final String CSUMMARY_CONSTITUENCY_GET = "CSummary_ConstituencyGet";
    //LS
    public static final String CS_SP_GetList_of_LS = "CS_SP_GetList_of_LS";
    public static final String CS_SP_GetList_of_VS_per_LS = "CS_SP_GetList_of_VS_per_LS";
    public static final String CS_UpdatePoliticalRemarks = "CS_UpdatePoliticalRemarks";
    public static final String CS_LS_GetLSRemarks = "CS_LS_GetLSRemarks";
    public static final String CS_SP_EditConstituencyBulletin_for_LS = "CS_SP_EditConstituencyBulletin_for_LS";
    public static final String cs_sp_GetNativeConstituencies = "cs_sp_GetNativeConstituencies ";


    //public static final String CSUMMARY_CONSTITUENCY_GET = "CSummary_ConstituencyGet";
    //Manage RM
    public static final String CS_GETRMROLE = "CS_RMRoleGet";
    public static final String CS_SAVE_RM = "CS_CreateUser_RM";
    public static final String CS_SUPERVISORSGET_RM = "CS_SupervisorsGet_RM";
    public static final String CS_UPDATE_RM = "CS_UpdateSupervisorRegionMap_RM";


    //Manage GM
    public static final String CS_GETGMROLE = "CS_GMRoleGet";
    public static final String CS_SAVE_GM = "CS_CreateUser_GM";
    public static final String CS_SUPERVISORSGET_GM = "CS_SupervisorsGet_GM";
    public static final String CS_UPDATE_GM = "CS_UpdateSupervisorRegionMap_GM";


    public static final String CS_SUPERVISOR_DELETE = "Cs_UserMappingDelete";


    //constituencySummary
    public static final String CS_GetTalukas = "CS_GetTalukas";
    public static final String CS_GetParliaments = "CS_GetParliaments";
    public static final String CS_GetConstituenciesByParliament = "CS_GetConstituenciesByParliament";
    public static final String CS_DeleteCandidateSWOT = "CS_DeleteCandidateSWOT";
    public static final String CS_SaveCandidateSWOT = "CS_SaveCandidateSWOT";
    public static final String CS_UpdateCandidateSWOT = "CS_UpdateCandidateSWOT";
    public static final String CS_GetSurveys = "CS_GetSurveys";
    public static final String CS_GetVillagesByTalukaId = "CS_GetVillagesByTalukaId";
    public static final String CS_GetQuestionsBySurveyId = "CS_GetQuestionsBySurveyId";
    public static final String CS_GetTalukasByConstituencyId = "CS_GetTalukasByConstituencyId";
    public static final String Cs_saveConstituencyBulletin = "Cs_saveConstituencyBulletin";
    public static final String CS_updateInfoRequired = "CS_updateInfoRequired";
    public static final String CS_GetSurveyOptions = "CS_GetSurveyOptions";
    public static final String CS_UpdatePoliticalSummary = "CS_UpdatePoliticalSummary";
    public static final String CS_UpdateCurrentStatus = "CS_UpdateCurrentStatus";
    public static final String UpdateConstyRemarks = "UpdateConstyRemarks";
    public static final String CS_GetFocusVillages = "CS_GP_SPGetVillages";
    public static final String CS_GetFocusVillagePoints = "CS_GP_SPGetGPInformation";
    public static final String CS_GetFocusVillagesPoints = "CSSP_GP_Village_ActionItems";
    public static final String CS_FINALIZED_CANDIDATE_SWOT = "CS_FinalisedCandidateSWOT";
    public static final String CS_GET_TALKING_POINT = "CS_GettalkingPoint";


    // uday
    public static final String CS_GetList_of_ZP = "CS_GetList_of_ZP";

    public static final String CS_MicroStrategyPollingStatusGet = "CS_MicroStrategyPollingStatusGet";
    public static final String GetPoliticalSummary = "GetPoliticalSummary";
    public static final String GetCurrentStatus = "CS_GetCurrentStatus";
    public static final String GetConstyRemarks = "GetConstyRemarks";
    public static final String getInfoRequired = "getInfoRequired";
    public static final String getConstituencyBulletin = "getConstituencyBulletin";
    public static final String GetVoterResults = "GetVoterResults";
    public static final String GetAbcdClassification = "GetAbcdClassification";
    public static final String GetMlaName = "GetMlaName";
    public static final String GetParties = "GetParties";
    public static final String GetElectionTypes = "GetElectionTypes";
    public static final String GetCandidatesCategory = "GetCandidatesCategory";
    public static final String GetCaste = "GetCaste";
    public static final String GetCallCenterFieldData = "GetCallCenterFieldData";
    public static final String GetAllDesignations = "GetAllDesignations";
    public static final String FinalisedCandidateCheck = "CS_SPGetFinalisedCandidate";
    public static final String FinalisedPartyCandidate = "CS_FinalisedCandidateSWOT";
    // ************** ScreenConfiguration sp start  *************************

    public static final String GetSectionsConfig = "CS_SP_GetSectionsConfig";
    public static final String UpdateScreenConfiguration = "CS_SP_UpdateSectionsConfig";

    // ************** ScreenConfiguration sp end  *************************
//LS
    public static final String CS_SP_GetPoliticalSummary_for_LS = "CS_SP_GetPoliticalSummary_for_LS";
    public static final String CS_SP_GetConstituencyBulletin = "CS_SP_GetConstituencyBulletin";
    public static final String CS_SP_GetInformationRequired_for_LS = "CS_SP_GetInformationRequired_for_LS";
    public static final String CS_SP_GetCurrentStatus_for_LS = "CS_SP_GetCurrentStatus_for_LS";
    public static final String CS_SP_EditInformationRequired_for_LS = "CS_SP_EditInformationRequired_for_LS";
    public static final String CS_SP_UpdateCurrentStatus_for_LS = "CS_SP_UpdateCurrentStatus_for_LS";
    public static final String CS_SP_UpdatePoliticalSummary_for_LS = "CS_SP_UpdatePoliticalSummary_for_LS";
    public static final String CS_SPGetElectionTypes = "CS_SPGetElectionTypes";


    public static Map<String, SimpleJdbcCall> spCalls = new HashMap<String, SimpleJdbcCall>();

    public static SimpleJdbcCall getSPCall(String key, DataSource ds, String spName, String packageName,
                                           Map<String, RowMapper<?>> cursorMappers, Map<String, Integer> outputParams) {
        SimpleJdbcCall spCall = spCalls.get(key);
        if (spCall == null) {
            spCall = new SimpleJdbcCall(ds).withProcedureName(spName);
            // Set SP package Name to be executed
            if (packageName != null && packageName.length() > 0)
                spCall.withCatalogName(packageName);

            //spCall.withSchemaName("inctrl");
            spCall.getJdbcTemplate().setQueryTimeout(240);
            //TODO: Need more flexibility to support multiple cursors
            for (String cursorName : cursorMappers.keySet()) {
                RowMapper<?> mapper = cursorMappers.get(cursorName);
                spCall.returningResultSet(cursorName, mapper);
            }


            // Declare Output Parameters
            for (Map.Entry<String, Integer> entry : outputParams.entrySet())
                spCall.declareParameters(new SqlOutParameter(entry.getKey(), entry.getValue()));


            // This SP is now compiled and looked up for metadata, add to cahce to be reused later
            spCalls.put(key, spCall);
        }

        return spCall;
    }

    @SuppressWarnings({"unchecked", "rawtypes"})
    public static List execute(DataSource ds, String packageName, String spName,
                               MapSqlParameterSource inputParams, Map<String, Integer> outputParams,
                               String cursorName, RowMapper<?> rowMapper) {
        Map<String, RowMapper<?>> cursorMappers = new HashMap<String, RowMapper<?>>();
        if (rowMapper != null)
            cursorMappers.put(cursorName, rowMapper);

        Map<String, Object> m = executeMultiple(ds, packageName, spName, inputParams, outputParams, cursorMappers);

        List<Object> results = new LinkedList<Object>();
        results = (List<Object>) m.get(cursorName);
        return results;
    }


    // Use the multiple method to call SP with multiple cursors
    @SuppressWarnings({"unchecked", "rawtypes"})
    public static Map<String, Object> executeMultiple(DataSource ds, String packageName, String spName,
                                                      MapSqlParameterSource inputParams, Map<String, Integer> outputParams,
            /*expects a map with cursorname --> rowmapper*/Map<String, RowMapper<?>> cursorMappers) {
        String key = packageName + "." + spName;//+rowMapper.getClass().getName();
        for (String cursorName : cursorMappers.keySet()) {
            RowMapper<?> mapper = cursorMappers.get(cursorName);
            key += mapper.getClass().getName();
        }


        // Get the compiled SP
        SimpleJdbcCall spCall = getSPCall(key, ds, spName, packageName, cursorMappers, outputParams);
        //spCall.getJdbcTemplate().setFetchSize(0);

        logSPParameters(inputParams, outputParams, key);
        long startTime = 0;
        long endTime = 0;
        if (log.isDebugEnabled())
            startTime = System.currentTimeMillis();


        Map<String, Object> m = null;
        if (inputParams != null)
            m = (Map<String, Object>) spCall.execute(inputParams);
        else
            m = (Map<String, Object>) spCall.execute(new HashMap<String, Object>());

        if (log.isDebugEnabled()) {
            endTime = System.currentTimeMillis();
            log.info("Time for execution of SP " + key + " is " + (endTime - startTime) / 1000 + " seconds.");
        }

        return m;
    }

    public static Map<String, Integer> getDefaultOutputParams(String cursorName, String errorCodeName, String statusMessageName) {
        Map<String, Integer> outputParams = new HashMap<String, Integer>();

        outputParams.put(cursorName, Types.REF_CURSOR);
        outputParams.put(errorCodeName, Types.INTEGER);
        outputParams.put(statusMessageName, Types.VARCHAR);

        return outputParams;
    }

    public static Map<String, Integer> getOnlyCursorOutputParams(String cursorName) {
        Map<String, Integer> outputParams = new HashMap<String, Integer>();

        outputParams.put(cursorName, Types.REF_CURSOR);

        return outputParams;
    }

    public static Map<String, Integer> getEmptyOutputParams() {
        Map<String, Integer> outputParams = new HashMap<String, Integer>();

        return outputParams;
    }


    public static Map<String, Integer> getDefaultOutputParams2(String statusCode, String statusDesc) {
        Map<String, Integer> outputParams = new HashMap<String, Integer>();

        outputParams.put(statusCode, Types.VARCHAR);
        outputParams.put(statusDesc, Types.VARCHAR);

        return outputParams;
    }

    public static Map<String, Integer> getDefaultOutputParams3(String cursorName) {
        Map<String, Integer> outputParams = new HashMap<String, Integer>();

        outputParams.put(cursorName, Types.REF_CURSOR);

        return outputParams;
    }

    public static Map<String, Integer> getDefaultOutputParams4OutputParam(String cursorName, String errorCodeName, String statusMessageName, String effectedPUGCount) {
        Map<String, Integer> outputParams = new HashMap<String, Integer>();
        outputParams.put(cursorName, Types.REF_CURSOR);
        outputParams.put(errorCodeName, Types.INTEGER);
        outputParams.put(statusMessageName, Types.VARCHAR);
        outputParams.put(effectedPUGCount, Types.INTEGER);

        return outputParams;
    }


    public static MapSqlParameterSource spInputParameters() {
        MapSqlParameterSource in = new MapSqlParameterSource();
        return in;
    }

    public static void logSPParameters(MapSqlParameterSource inputParams, Map<String, Integer> outputParams, String spName) {
        if (log.isDebugEnabled()) {
            log.debug("Executing SP: " + spName + " with the below Parameters.");

            log.debug("Input:");
            if (inputParams != null) {
                Map<String, Object> inpMap = inputParams.getValues();
                for (Map.Entry<String, Object> entry : inpMap.entrySet()) {
                    log.debug(entry.getKey() + " = " + entry.getValue());
                }
            }

            log.debug("Output:");
            if (outputParams != null) {
                for (Map.Entry<String, Integer> entry : outputParams.entrySet()) {
                    log.debug(entry.getKey() + " = " + entry.getValue());
                }
            }
        }
    }

    public static Map<String, Integer> getSaveUpdateOutput(String errorCodeName, String statusMessageName, String id) {
        Map<String, Integer> outputParams = new HashMap<String, Integer>();
        outputParams.put(errorCodeName, Types.INTEGER);
        outputParams.put(statusMessageName, Types.VARCHAR);
        outputParams.put(id, Types.INTEGER);

        return outputParams;
    }

    public static Map<String, Integer> getOutput(String errorCodeName, String statusMessageName, String outout) {
        Map<String, Integer> outputParams = new HashMap<String, Integer>();
        outputParams.put(errorCodeName, Types.INTEGER);
        outputParams.put(statusMessageName, Types.VARCHAR);
        outputParams.put(outout, Types.VARCHAR);

        return outputParams;
    }

    public static Map<String, Integer> getSaveUpdateOutput(String errorCodeName, String statusMessageName) {
        Map<String, Integer> outputParams = new HashMap<String, Integer>();
        outputParams.put(errorCodeName, Types.INTEGER);
        outputParams.put(statusMessageName, Types.VARCHAR);

        return outputParams;
    }

    @SuppressWarnings("unchecked")
    public static Long executeUpdateWithResultSet(DataSource ds, String packageName, String spName,
                                                  MapSqlParameterSource inputParams, Map<String, Integer> outputParams, String fetchKey
    ) {
        String key = packageName + "." + spName;
        SimpleJdbcCall spCall = spCalls.get(key);
        if (spCall == null) {
            spCall = new SimpleJdbcCall(ds).withProcedureName(spName);
            // Set SP package Name to be executed
            if (packageName != null && packageName.length() > 0)
                spCall.withCatalogName(packageName);
            //spCall.withSchemaName("inctrl");
            spCall.getJdbcTemplate().setQueryTimeout(240);
            //spCall.returningResultSet(cursorName, rowMapper);

            // Declare Output Parameters
            for (Map.Entry<String, Integer> entry : outputParams.entrySet()) {
                spCall.declareParameters(new SqlOutParameter(entry.getKey(), entry.getValue()));
            }

            // This SP is now compiled and looked up for metadata, add to cahce to be reused later
            spCalls.put(key, spCall);
        }


        List<Object> results = new ArrayList<Object>();
        logSPParameters(inputParams, outputParams, key);


        Map<String, Object> m = null;
        if (inputParams != null)
            m = (Map<String, Object>) spCall.execute(inputParams);
        else
            m = (Map<String, Object>) spCall.execute(new HashMap<String, Object>());
        if (m.get(fetchKey) != null)
            return Long.parseLong(m.get(fetchKey).toString());

        return null;
        //return results;
    }

    @SuppressWarnings("unchecked")
    public static List executeUpdate(DataSource ds, String packageName, String spName,
                                     MapSqlParameterSource inputParams, Map<String, Integer> outputParams
    ) {
        String key = packageName + "." + spName;
        SimpleJdbcCall spCall = spCalls.get(key);
        if (spCall == null) {
            spCall = new SimpleJdbcCall(ds).withProcedureName(spName);
            // Set SP package Name to be executed
            if (packageName != null && packageName.length() > 0)
                spCall.withCatalogName(packageName);

            //spCall.withSchemaName("inctrl");
            spCall.getJdbcTemplate().setQueryTimeout(240);
            //spCall.returningResultSet(cursorName, rowMapper);

            // Declare Output Parameters
            for (Map.Entry<String, Integer> entry : outputParams.entrySet()) {
                spCall.declareParameters(new SqlOutParameter(entry.getKey(), entry.getValue()));
            }

            // This SP is now compiled and looked up for metadata, add to cahce to be reused later
            spCalls.put(key, spCall);
        }


        List<Object> results = new ArrayList<Object>();
        logSPParameters(inputParams, outputParams, key);


        Map<String, Object> m = null;
        if (inputParams != null)
            m = (Map<String, Object>) spCall.execute(inputParams);
        else
            m = (Map<String, Object>) spCall.execute(new HashMap<String, Object>());

        //results = (List<Object>) m.get(cursorName);
        return results;
    }

    @SuppressWarnings("unchecked")
    public static Map<String, Object> executeUpdateAddOrUpdateTags(DataSource ds, String packageName, String spName,
                                                                   MapSqlParameterSource inputParams, Map<String, Integer> outputParams
    ) {
        String key = packageName + "." + spName;
        SimpleJdbcCall spCall = spCalls.get(key);
        if (spCall == null) {
            spCall = new SimpleJdbcCall(ds).withProcedureName(spName);
            // Set SP package Name to be executed
            if (packageName != null && packageName.length() > 0)
                spCall.withCatalogName(packageName);
            //spCall.withSchemaName("inctrl");
            spCall.getJdbcTemplate().setQueryTimeout(240);
            //spCall.returningResultSet(cursorName, rowMapper);

            // Declare Output Parameters
            for (Map.Entry<String, Integer> entry : outputParams.entrySet()) {
                spCall.declareParameters(new SqlOutParameter(entry.getKey(), entry.getValue()));
            }

            // This SP is now compiled and looked up for metadata, add to cahce to be reused later
            spCalls.put(key, spCall);
        }


        List<Object> results = new ArrayList<Object>();
        logSPParameters(inputParams, outputParams, key);


        Map<String, Object> m = null;
        if (inputParams != null)
            m = (Map<String, Object>) spCall.execute(inputParams);
        else
            m = (Map<String, Object>) spCall.execute(new HashMap<String, Object>());

        //results = (List<Object>) m.get(cursorName);
        return m;
    }

    /*
     * Use below method for no output cursor calls, just plain param based call
     */
    @SuppressWarnings("unchecked")
    public static Map<String, Object> execute(DataSource ds, String packageName, String spName,
                                              MapSqlParameterSource inputParams, Map<String, Integer> outputParams
    ) {
        String key = packageName + "." + spName;
        SimpleJdbcCall spCall = spCalls.get(key);
        if (spCall == null) {
            spCall = new SimpleJdbcCall(ds).withProcedureName(spName);
            // Set SP package Name to be executed
            if (packageName != null && packageName.length() > 0)
                spCall.withCatalogName(packageName);
            //spCall.withSchemaName("inctrl");
            spCall.getJdbcTemplate().setQueryTimeout(240);
            //spCall.returningResultSet(cursorName, rowMapper);

            // Declare Output Parameters
            for (Map.Entry<String, Integer> entry : outputParams.entrySet()) {
                spCall.declareParameters(new SqlOutParameter(entry.getKey(), entry.getValue()));
            }

            // This SP is now compiled and looked up for metadata, add to cahce to be reused later
            spCalls.put(key, spCall);
        }


        List<Object> results = new ArrayList<Object>();
        logSPParameters(inputParams, outputParams, key);


        Map<String, Object> m = null;
        if (inputParams != null)
            m = (Map<String, Object>) spCall.execute(inputParams);
        else
            m = (Map<String, Object>) spCall.execute(new HashMap<String, Object>());

        //results = (List<Object>) m.get(cursorName);
        return m;
    }


    public static int executeFunction(DataSource ds, String packageName, String funName) {
        SqlFunction func = new SqlFunction(ds, "SELECT " + packageName + "." + funName + " from dual");
        return func.run();
    }


    public static String getCallSPStatement(final String pSPName, final int pParamCount) {
        StringBuffer callStmt = new StringBuffer("{ call ");
        callStmt.append(pSPName);
        callStmt.append("(");
        for (int i = 0; i < pParamCount; i++) {
            if (i != 0) callStmt.append(",");
            callStmt.append("?");
        }
        callStmt.append(") }");

        return callStmt.toString();
    }
	
	/*public static String buildInStatement(final String[] input )
	{
		StringBuffer inStmt = new StringBuffer("(");
		
		for(int i=0; i<input.length; i++)
		{
			if(i==input.length-1){
				inStmt.append("'"+input[i]+"'");
			}else{
				inStmt.append("'"+input[i]+"',");
			}
			
		}
		
		inStmt.append(")");
	
		return inStmt.toString();
	}
	
	public static String getPreparedStatement(final String pSPName,final int pParamCount )
	{
		StringBuffer psStmt = new StringBuffer(pSPName);
		psStmt.append(" VALUES (");
		for(int i=0; i<pParamCount; i++)
		{
			if(i!=0) psStmt.append(",");
			psStmt.append("?");
		}
		psStmt.append(")");
	
		return psStmt.toString();
	}
	
	public static void dbCleanUp(ResultSet pRs, Statement pStmt, Connection pConn)
    {
        closeResultSet(pRs);
        closeStatement(pStmt);
        closeConnection(pConn);
    }

    public static void closeResultSet(ResultSet pRs)
    {
        try
        {
            if (pRs != null)
            {
            	pRs.close();
            	pRs=null;
            }
        }
        catch (SQLException e)
        {
        	//logger.error( "Error closing a DB ResultSet:", e);
        	
        }
    }

    public static void closeStatement(Statement pStmt)
    {
        try
        {
            if (pStmt != null)
            {
            	pStmt.close();
            	pStmt=null;
            }
        }
        catch (SQLException e)
        {
        	//logger.error( "Error closing a DB Statement:" , e);
        	
        }
    }

    public static void closeConnection(Connection pConn)
    {
        if (pConn != null)
        {
            try
            {
                pConn.close();
            	pConn=null;
                 
            }
            catch (SQLException e)
            {
            	//logger.error( "Error closing a connection:", e);
            	
            }
        }
     }
    
   

	public static void setFetchSize(ResultSet rs, int rowcount) throws SQLException{
		if(rowcount>50000){
			rs.setFetchSize(5000);
		}else if(rowcount>5000){
			rs.setFetchSize(1000);
		}else if(rowcount>1000){
			rs.setFetchSize(500);
		}else{
			rs.setFetchSize(100);
		}
	}*/

}
